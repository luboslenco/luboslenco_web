uniform mediump float globalTime;
varying mediump vec2 uv;
mediump float EPSILON_NRM = 0.00015625;
mediump float SEA_TIME = (globalTime * 0.80000001);
mediump mat2 octave_m = mat2(1.6, 1.2, -1.2, 1.6);
mediump mat3 fromEuler(in mediump vec3 ang){
mediump vec2 a1 = vec2(sin(ang.x), cos(ang.x));
mediump vec2 a2 = vec2(sin(ang.y), cos(ang.y));
mediump vec2 a3 = vec2(sin(ang.z), cos(ang.z));
mediump mat3 m;
(m[0] = vec3(((a1.y * a3.y) + ((a1.x * a2.x) * a3.x)), (((a1.y * a2.x) * a3.x) + (a3.y * a1.x)), ((-a2.y) * a3.x)));
(m[1] = vec3(((-a2.y) * a1.x), (a1.y * a2.y), a2.x));
(m[2] = vec3((((a3.y * a1.x) * a2.x) + (a1.y * a3.x)), ((a1.x * a3.x) - ((a1.y * a3.y) * a2.x)), (a2.y * a3.y)));
return m;
}
mediump float hash(in mediump vec2 p){
mediump float h = dot(p, vec2(127.1, 311.70001));
return fract((sin(h) * 43758.547));
}
mediump float noise(in mediump vec2 p){
mediump vec2 i = floor(p);
mediump vec2 f = fract(p);
mediump vec2 u = ((f * f) * (3.0 - (2.0 * f)));
return (-1.0 + (2.0 * mix(mix(hash((i + vec2(0.0, 0.0))), hash((i + vec2(1.0, 0.0))), u.x), mix(hash((i + vec2(0.0, 1.0))), hash((i + vec2(1.0, 1.0))), u.x), u.y)));
}
mediump float diffuse(in mediump vec3 n, in mediump vec3 l, in mediump float p){
return pow(((dot(n, l) * 0.40000001) + 0.60000002), p);
}
mediump float specular(in mediump vec3 n, in mediump vec3 l, in mediump vec3 e, in mediump float s){
mediump float nrm = ((s + 8.0) / 25.132);
return (pow(max(dot(reflect(e, n), l), 0.0), s) * nrm);
}
mediump vec3 getSkyColor(in mediump vec3 e){
(e.y = max(e.y, 0.0));
mediump vec3 ret;
(ret.x = pow((1.0 - e.y), 2.0));
(ret.y = (1.0 - e.y));
(ret.z = (0.60000002 + ((1.0 - e.y) * 0.40000001)));
return ret;
}
mediump float sea_octave(in mediump vec2 uv, in mediump float choppy){
(uv += noise(uv));
mediump vec2 wv = (1.0 - abs(sin(uv)));
mediump vec2 swv = abs(cos(uv));
(wv = mix(wv, swv, wv));
return pow((1.0 - pow((wv.x * wv.y), 0.64999998)), choppy);
}
mediump float map(in mediump vec3 p){
mediump float freq = 0.16;
mediump float amp = 0.60000002;
mediump float choppy = 4.0;
mediump vec2 uv = p.xz;
(uv.x *= 0.75);
mediump float d, h = 0.0;
for (mediump int i = 0; (i < 3); (i++))
{
(d = sea_octave(((uv + SEA_TIME) * freq), choppy));
(d += sea_octave(((uv - SEA_TIME) * freq), choppy));
(h += (d * amp));
(uv *= octave_m);
(freq *= 1.9);
(amp *= 0.22);
(choppy = mix(choppy, 1.0, 0.2));
}
return (p.y - h);
}
mediump float map_detailed(in mediump vec3 p){
mediump float freq = 0.16;
mediump float amp = 0.60000002;
mediump float choppy = 4.0;
mediump vec2 uv = p.xz;
(uv.x *= 0.75);
mediump float d, h = 0.0;
for (mediump int i = 0; (i < 5); (i++))
{
(d = sea_octave(((uv + SEA_TIME) * freq), choppy));
(d += sea_octave(((uv - SEA_TIME) * freq), choppy));
(h += (d * amp));
(uv *= octave_m);
(freq *= 1.9);
(amp *= 0.22);
(choppy = mix(choppy, 1.0, 0.2));
}
return (p.y - h);
}
mediump vec3 getSeaColor(in mediump vec3 p, in mediump vec3 n, in mediump vec3 l, in mediump vec3 eye, in mediump vec3 dist){
mediump float fresnel = (1.0 - max(dot(n, (-eye)), 0.0));
(fresnel = (pow(fresnel, 3.0) * 0.64999998));
mediump vec3 reflected = getSkyColor(reflect(eye, n));
mediump vec3 refracted = (vec3(0.1, 0.19, 0.22) + ((diffuse(n, l, 80.0) * vec3(0.80000001, 0.89999998, 0.60000002)) * 0.12));
mediump vec3 color = mix(refracted, reflected, fresnel);
mediump float atten = max((1.0 - (dot(dist, dist) * 0.001)), 0.0);
(color += (((vec3(0.80000001, 0.89999998, 0.60000002) * (p.y - 0.60000002)) * 0.18000001) * atten));
(color += vec3(specular(n, l, eye, 60.0)));
return color;
}
mediump vec3 getNormal(in mediump vec3 p, in mediump float eps){
mediump vec3 n;
(n.y = map_detailed(p));
(n.x = (map_detailed(vec3((p.x + eps), p.y, p.z)) - n.y));
(n.z = (map_detailed(vec3(p.x, p.y, (p.z + eps))) - n.y));
(n.y = eps);
return normalize(n);
}
mediump float heightMapTracing(in mediump vec3 ori, in mediump vec3 dir, out mediump vec3 p){
mediump float tm = 0.0;
mediump float tx = 1000.0;
mediump float hx = map((ori + (dir * tx)));
if ((hx > 0.0))
return tx;
mediump float hm = map((ori + (dir * tm)));
mediump float tmid = 0.0;
for (mediump int i = 0; (i < 8); (i++))
{
(tmid = mix(tm, tx, (hm / (hm - hx))));
(p = (ori + (dir * tmid)));
mediump float hmid = map(p);
if ((hmid < 0.0))
{
(tx = tmid);
(hx = hmid);
}
else
{
(tm = tmid);
(hm = hmid);
}
}
return tmid;
}
void kore(){
mediump vec2 _uv = ((uv * 2.0) - 1.0);
(_uv.x *= 1.3333334);
mediump float time = (globalTime * 0.30000001);
mediump vec3 ang = vec3((sin((time * 3.0)) * 0.1), ((sin(time) * 0.2) + 0.30000001), time);
mediump vec3 ori = vec3(0.0, 3.5, (time * 5.0));
mediump vec3 dir = normalize(vec3(_uv.xy, -2.0));
(dir.z += (length(_uv) * 0.15000001));
(dir = (normalize(dir) * fromEuler(ang)));
mediump vec3 p;
heightMapTracing(ori, dir, p);
mediump vec3 dist = (p - ori);
mediump vec3 n = getNormal(p, (dot(dist, dist) * EPSILON_NRM));
mediump vec3 light = normalize(vec3(0.0, 1.0, 0.80000001));
mediump vec3 color = mix(getSkyColor(dir), getSeaColor(p, n, light, dir, dist), pow(smoothstep(0.0, -0.050000001, dir.y), 0.30000001));
(gl_FragColor = vec4(pow(color, vec3(0.75, 0.75, 0.75)), 1.0));
}
void main(){
kore();
}
