#version 100
precision mediump float;
uniform sampler2D myTextureSampler;
varying vec2 UV;
uniform vec3 lightPos;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 LightDirection_cameraspace;
varying vec3 EyeDirection_cameraspace;
uniform mat4 MV;


void main()
{
	vec3 LightColor;
	float LightPower;
	vec3 MaterialDiffuseColor;
	vec3 MaterialAmbientColor;
	vec3 MaterialSpecularColor;
	float distance;
	vec3 n;
	vec3 l;
	float cosTheta;
	vec3 E;
	vec3 R;
	float cosAlpha;
	LightColor = vec3(1.0, 1.0, 1.0);
	LightPower = 50.0;
	MaterialDiffuseColor = vec3(texture2D(myTextureSampler, UV)[0], texture2D(myTextureSampler, UV)[1], texture2D(myTextureSampler, UV)[2]);
	MaterialAmbientColor = (vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor);
	MaterialSpecularColor = vec3(0.3, 0.3, 0.3);
	distance = length((lightPos - Position_worldspace));
	n = normalize(Normal_cameraspace);
	l = normalize(LightDirection_cameraspace);
	cosTheta = clamp(dot(n, l), 0.0, 1.0);
	E = normalize(EyeDirection_cameraspace);
	R = (-l - (n * (2.0 * dot(n, -l))));
	cosAlpha = clamp(dot(E, R), 0.0, 1.0);
	gl_FragColor = vec4(vec3(((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[0], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[1], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[2])[0], vec3(((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[0], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[1], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[2])[1], vec3(((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[0], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[1], ((MaterialAmbientColor + ((((MaterialDiffuseColor * LightColor) * LightPower) * cosTheta) / vec3((distance * distance), (distance * distance), (distance * distance)))) + ((((MaterialSpecularColor * LightColor) * LightPower) * pow(cosAlpha, 5.0)) / vec3((distance * distance), (distance * distance), (distance * distance))))[2])[2], 1.0);
	// Branch to 6
	// Label 6
	return;
}

